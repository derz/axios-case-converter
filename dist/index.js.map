{"version":3,"file":"index.js","sources":["../src/util.js","../src/transform.js","../src/index.js"],"sourcesContent":["export const isURLSearchParams = value => typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams\nexport const isFormData = value => typeof FormData !== 'undefined' && value instanceof FormData\nexport const isPlainObject = value => typeof value === 'object' && value !== null && Object.prototype.toString.call(value) === '[object Object]'\n","import {\n  camelizeKeys,\n  decamelizeKeys\n} from 'humps';\n\nimport { isPlainObject, isURLSearchParams, isFormData } from './util'\n\nconst transform = (data, fn, overwrite = false) => {\n  if (!Array.isArray(data) && !isPlainObject(data) && !isFormData(data) && !isURLSearchParams(data)) {\n    return data\n  }\n\n  /* eslint-disable no-console */\n  if (isFormData(data) && !data.entries) {\n    console.warn('You must use polyfill of FormData.prototype.entries() on Internet Explorer or Safari: https://github.com/jimmywarting/FormData')\n\n    return data;\n  }\n  /* eslint-enable no-console */\n\n  const prototype = Object.getPrototypeOf(data)\n  const store = overwrite ? data : prototype ? new prototype.constructor : Object.create(null)\n  for (const [key, value] of prototype && prototype.entries ? prototype.entries.call(data) : Object.entries(data)) {\n    if (prototype && prototype.append) {\n      prototype.append.call(store, key.replace(/[^[\\]]+/g, k => fn(k)), transform(value, fn))\n    } else if (key !== '__proto__') {\n      store[fn(key)] = transform(value, fn)\n    }\n  }\n  return store\n}\n\nexport const createTransform = fn => (data, overwrite = false) => transform(data, fn, overwrite)\n\nexport const snake = createTransform(decamelizeKeys);\nexport const camel = createTransform(camelizeKeys);\n","import { snake, camel } from './transform'\n\nconst snakeParams = config => {\n  if (config.params) {\n    config.params = snake(config.params)\n  }\n\n  return config\n}\n\nconst snakeRequest = (data, headers) => {\n  return snake(data)\n}\n\nconst camelResponse = (data, headers) => {\n  return camel(data)\n}\n\nconst applyConverters = axios => {\n  axios.defaults.transformRequest = [snakeRequest, ...axios.defaults.transformRequest]\n  axios.defaults.transformResponse = [...axios.defaults.transformResponse, camelResponse]\n\n  axios.interceptors.request.use(snakeParams)\n\n  return axios\n}\n\nexport default applyConverters;\n"],"names":["isFormData","value","FormData","transform","data","fn","overwrite","Array","isArray","Object","prototype","toString","call","URLSearchParams","entries","console","warn","getPrototypeOf","store","constructor","create","const","ref","append","key","replace","k","createTransform","snake","decamelizeKeys","camel","camelizeKeys","snakeParams","config","params","snakeRequest","headers","camelResponse","axios","defaults","transformRequest","transformResponse","interceptors","request","use"],"mappings":"uBACaA,WAAaC,SAA6B,oBAAbC,UAA4BD,aAAiBC,UCMjFC,WAAaC,EAAMC,EAAIC,sBAAY,KAClCC,MAAMC,QAAQJ,IDNkC,iBCMVA,GDNgC,OCMhCA,GDNkF,oBAA1CK,OAAOC,UAAUC,SAASC,KCMlER,IAAUJ,EAAWI,IDRG,oBAApBS,iBCQ6CT,aDROS,wBCS1FT,KAILJ,EAAWI,KAAUA,EAAKU,eAC5BC,QAAQC,KAAK,kIAENZ,UAIHM,EAAYD,OAAOQ,eAAeb,GAClCc,EAAQZ,EAAYF,EAAOM,EAAY,IAAIA,EAAUS,YAAcV,OAAOW,OAAO,YAC5DV,GAAaA,EAAUI,QAAUJ,EAAUI,QAAQF,KAAKR,GAAQK,OAAOK,QAAQV,mBAAO,CAA5GiB,IAAMC,qBACLZ,GAAaA,EAAUa,OACzBb,EAAUa,OAAOX,KAAKM,EAAOM,EAAIC,QAAQ,oBAAYC,UAAKrB,EAAGqB,KAAKvB,EAAUF,EAAOI,IAClE,cAARmB,IACTN,EAAMb,EAAGmB,IAAQrB,EAAUF,EAAOI,WAG/Ba,GAGIS,WAAkBtB,mBAAOD,EAAME,0BAAY,GAAUH,EAAUC,EAAMC,EAAIC,KAEzEsB,EAAQD,EAAgBE,kBACxBC,EAAQH,EAAgBI,gBCjC/BC,WAAcC,UACdA,EAAOC,SACTD,EAAOC,OAASN,EAAMK,EAAOC,SAGxBD,GAGHE,WAAgB/B,EAAMgC,UACnBR,EAAMxB,IAGTiC,WAAiBjC,EAAMgC,UACpBN,EAAM1B,4BAGSkC,UACtBA,EAAMC,SAASC,iBAAmB,CAACL,UAAiBG,EAAMC,SAASC,kBACnEF,EAAMC,SAASE,kBAAwBH,EAAMC,mCAA4BF,IAEzEC,EAAMI,aAAaC,QAAQC,IAAIZ,GAExBM"}