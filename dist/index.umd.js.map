{"version":3,"file":"index.umd.js","sources":["../src/util.js","../src/transform.js","../src/index.js"],"sourcesContent":["export const isURLSearchParams = value => typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams\nexport const isFormData = value => typeof FormData !== 'undefined' && value instanceof FormData\nexport const isPlainObject = value => typeof value === 'object' && value !== null && Object.prototype.toString.call(value) === '[object Object]'\n","import {\n  camel as ccCamel,\n  decamelizeKeys as ccSnake\n} from 'humps';\n\nimport { isPlainObject, isURLSearchParams, isFormData } from './util'\n\nconst transform = (data, fn, overwrite = false) => {\n  if (!Array.isArray(data) && !isPlainObject(data) && !isFormData(data) && !isURLSearchParams(data)) {\n    return data\n  }\n\n  /* eslint-disable no-console */\n  if (isFormData(data) && !data.entries) {\n    if (navigator.product === 'ReactNative') {\n      console.warn('Be careful that FormData cannot be transformed on React Native. If you intentionally implemented, ignore this kind of warning: https://facebook.github.io/react-native/docs/debugging.html')\n    } else {\n      console.warn('You must use polyfill of FormData.prototype.entries() on Internet Explorer or Safari: https://github.com/jimmywarting/FormData')\n    }\n    return data\n  }\n  /* eslint-enable no-console */\n\n  const prototype = Object.getPrototypeOf(data)\n  const store = overwrite ? data : prototype ? new prototype.constructor : Object.create(null)\n  for (const [key, value] of prototype && prototype.entries ? prototype.entries.call(data) : Object.entries(data)) {\n    if (prototype && prototype.append) {\n      prototype.append.call(store, key.replace(/[^[\\]]+/g, k => fn(k)), transform(value, fn))\n    } else if (key !== '__proto__') {\n      store[fn(key)] = transform(value, fn)\n    }\n  }\n  return store\n}\n\nexport const createTransform = fn => (data, overwrite = false) => transform(data, fn, overwrite)\n\nexport const snake = createTransform(ccSnake)\nexport const camel = createTransform(ccCamel)\n\nexport default transform\n","import { snake, camel } from './transform'\n\nconst snakeParams = config => {\n  if (config.params) {\n    config.params = snake(config.params)\n  }\n\n  return config\n}\n\nconst snakeRequest = (data, headers) => {\n  return snake(data)\n}\n\nconst camelResponse = (data, headers) => {\n  return camel(data)\n}\n\nconst applyConverters = axios => {\n  axios.defaults.transformRequest = [snakeRequest, ...axios.defaults.transformRequest]\n  axios.defaults.transformResponse = [...axios.defaults.transformResponse, camelResponse]\n\n  axios.interceptors.request.use(snakeParams)\n\n  return axios\n}\n\nexport default applyConverters\n"],"names":["const","isFormData","value","FormData","transform","data","fn","overwrite","Array","isArray","Object","prototype","toString","call","URLSearchParams","entries","navigator","product","console","warn","getPrototypeOf","store","constructor","create","ref","append","key","replace","k","createTransform","snake","ccSnake","camel","ccCamel","snakeParams","config","params","snakeRequest","headers","camelResponse","axios","defaults","transformRequest","transformResponse","interceptors","request","use"],"mappings":"mNAAOA,IACMC,WAAaC,SAA6B,oBAAbC,UAA4BD,aAAiBC,UCMjFC,WAAaC,EAAMC,EAAIC,sBAAY,KAClCC,MAAMC,QAAQJ,IDNkC,iBCMVA,GDNgC,OCMhCA,GDNkF,oBAA1CK,OAAOC,UAAUC,SAASC,KCMlER,IAAUJ,EAAWI,IDRG,oBAApBS,iBCQ6CT,aDROS,wBCS1FT,KAILJ,EAAWI,KAAUA,EAAKU,cACF,gBAAtBC,UAAUC,QACZC,QAAQC,KAAK,8LAEbD,QAAQC,KAAK,kIAERd,UAIHM,EAAYD,OAAOU,eAAef,GAClCgB,EAAQd,EAAYF,EAAOM,EAAY,IAAIA,EAAUW,YAAcZ,OAAOa,OAAO,YAC5DZ,GAAaA,EAAUI,QAAUJ,EAAUI,QAAQF,KAAKR,GAAQK,OAAOK,QAAQV,mBAAO,CAA5GL,IAAMwB,qBACLb,GAAaA,EAAUc,OACzBd,EAAUc,OAAOZ,KAAKQ,EAAOK,EAAIC,QAAQ,oBAAYC,UAAKtB,EAAGsB,KAAKxB,EAAUF,EAAOI,IAClE,cAARoB,IACTL,EAAMf,EAAGoB,IAAQtB,EAAUF,EAAOI,WAG/Be,GAGIQ,WAAkBvB,mBAAOD,EAAME,0BAAY,GAAUH,EAAUC,EAAMC,EAAIC,KAEzEuB,EAAQD,EAAgBE,kBACxBC,EAAQH,EAAgBI,SCpC/BC,WAAcC,UACdA,EAAOC,SACTD,EAAOC,OAASN,EAAMK,EAAOC,SAGxBD,GAGHE,WAAgBhC,EAAMiC,UACnBR,EAAMzB,IAGTkC,WAAiBlC,EAAMiC,UACpBN,EAAM3B,oBAGSmC,UACtBA,EAAMC,SAASC,iBAAmB,CAACL,UAAiBG,EAAMC,SAASC,kBACnEF,EAAMC,SAASE,kBAAwBH,EAAMC,mCAA4BF,IAEzEC,EAAMI,aAAaC,QAAQC,IAAIZ,GAExBM"}